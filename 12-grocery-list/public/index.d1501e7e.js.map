{"mappings":"kBAEMA,EAAOC,SAASC,cAAc,SAC9BC,EAAOF,SAASC,cAAc,SAC9BE,EAAYH,SAASC,cAAc,eACnCG,EAAkBJ,SAASC,cAAc,mBAI3CI,EAAU,EAuDd,SAAAC,UACQC,EAAOC,KAAKC,WACZC,EAAQH,EAAKN,cAAc,SACnBO,KACRG,UAAUC,IAAI,UACpBF,EAAMC,UAAUE,OAAO,UAEvBH,EAAMI,QACNJ,EAAMK,iBAAiB,OAAQC,GAC/BT,EAAKQ,iBAAiB,SAAUC,GAGlC,SAAAA,EAAmBC,GACjBA,EAAEC,uBACIX,EAAOC,KAAKC,WACZC,EAAQH,EAAKN,cAAc,SAC3BkB,EAAQZ,EAAKN,cAAc,SAC5BS,EAAMU,OAGTD,EAAME,YAAcX,EAAMU,MAC1BD,EAAMR,UAAUE,OAAO,UACvBH,EAAMC,UAAUC,IAAI,UACpBF,EAAMY,QALNC,EAAWb,EAAMc,QAAQC,KAW7B,SAAAF,EAAoBG,OACdC,EAAK,QAAUD,EACfE,EAAc5B,SAASC,cAAc0B,GACzC5B,EAAK8B,YAAYD,GA4BnB1B,EAAKa,iBAAiB,UAvBtB,SAAsBE,GACpBA,EAAEC,qBACEE,EAAQjB,EAAUiB,UACjBA,SACI,GA7FX,SAAoBA,OACdM,EAAQrB,UAGNyB,EAAW9B,SAAS+B,cAAc,MACxCD,EAASE,aAAa,QAAS,cAC/BF,EAASE,aAAa,KAAA,OAAaN,WAG7BO,EAAWjC,SAAS+B,cAAc,QACxCE,EAASD,aAAa,QAAS,cAC/BC,EAASD,aAAa,WAAYN,SAG5BP,EAAQnB,SAAS+B,cAAc,SACrCZ,EAAMa,aAAa,QAAS,eAC5Bb,EAAMa,aAAa,WAAYN,GAC/BP,EAAMa,aAAa,MAAA,aAAoBN,KACvCP,EAAME,YAAcD,EACpBa,EAASC,YAAYf,GAErBA,EAAMJ,iBAAiB,QAAST,SAG1BI,EAAQV,SAAS+B,cAAc,SACrCrB,EAAMsB,aAAa,OAAA,OAAeN,KAClChB,EAAMsB,aAAa,WAAYN,GAC/BhB,EAAMsB,aAAa,QAASZ,GAC5BV,EAAMsB,aAAa,KAAA,aAAmBN,KACtChB,EAAMsB,aAAa,QAAS,qBAC5BC,EAASC,YAAYxB,GAErBoB,EAASI,YAAYD,SAGfE,EAAenC,SAAS+B,cAAc,UAC5CI,EAAaH,aAAa,QAAS,gBACnCG,EAAaH,aAAa,WAAYN,GACtCS,EAAaH,aAAa,aAAc,eACxCG,EAAaC,UAAY,6CACzBN,EAASI,YAAYC,GAErBA,EAAapB,iBAAiB,SAAS,KACrCQ,EAAWG,MAGb3B,EAAKmC,YAAYJ,GAiDfO,CAAWjB,GACXZ,KAAK8B,QACLnC,EAAUW,WAgBdV,EAAgBW,iBAAiB,SAVjC,gBACShB,EAAKwC,YACVxC,EAAK8B,YAAY9B,EAAKwC,YAExBpC,EAAUW,WAUZX,EAAUW","sources":["./src/index.js"],"sourcesContent":["// element selectors\n\nconst list = document.querySelector('.list'); // the grocery list\nconst form = document.querySelector('.form'); // the form to add a new item\nconst formInput = document.querySelector('#item-input'); // the input form for ^\nconst clearListButton = document.querySelector('#clear-list'); // the button to clear the entire list\n\n// create item\n\nlet counter = 0; // global counter to track which index to give to the next item created\n\n// creates a new item, adds it to the list element, updates the DOM\nfunction createItem(value) {\n  let index = counter++; // declaring index as local counter; increment counter\n\n  // creating the container element\n  const listItem = document.createElement('li');\n  listItem.setAttribute('class', 'list__item');\n  listItem.setAttribute('id', `item${index}`);\n\n  // child element: form\n  const listForm = document.createElement('form');\n  listForm.setAttribute('class', 'list__form');\n  listForm.setAttribute('data-for', index);\n\n  // child element: label\n  const label = document.createElement('label');\n  label.setAttribute('class', 'list__label');\n  label.setAttribute('data-for', index);\n  label.setAttribute('for', `list-input${index}`);\n  label.textContent = value;\n  listForm.appendChild(label);\n\n  label.addEventListener('click', updateStart); // the label is displayed normally, but is swapped out for the input on click\n\n  // child element: input (for updating value in the future);\n  const input = document.createElement('input');\n  input.setAttribute('name', `item${index}`);\n  input.setAttribute('data-for', index);\n  input.setAttribute('value', value);\n  input.setAttribute('id', `list-input${index}`);\n  input.setAttribute('class', 'list__edit hidden');\n  listForm.appendChild(input);\n\n  listItem.appendChild(listForm); // appending the completed form to the main container\n\n  // child element: delete button\n  const deleteButton = document.createElement('button');\n  deleteButton.setAttribute('class', 'list__delete');\n  deleteButton.setAttribute('data-for', index);\n  deleteButton.setAttribute('aria-label', 'Delete item');\n  deleteButton.innerHTML = '<span class=\"material-icons\">delete</span>';\n  listItem.appendChild(deleteButton);\n\n  deleteButton.addEventListener('click', () => {\n    deleteItem(index); // passing in the local scope counter to track the current list item\n  });\n\n  list.appendChild(listItem);\n}\n\n// update item\n\n// begins the item updating process: swaps out an input field for the label, creates event listeners for the current item to update when updating is finished\nfunction updateStart() {\n  const form = this.parentNode; // updateStart is always called from an event listener on the label field, so this is the label\n  const input = form.querySelector('input');\n  const label = this;\n  label.classList.add('hidden');\n  input.classList.remove('hidden');\n\n  input.focus();\n  input.addEventListener('blur', updateEnd);\n  form.addEventListener('submit', updateEnd);\n}\n\nfunction updateEnd(e) {\n  e.preventDefault();\n  const form = this.parentNode;\n  const input = form.querySelector('input');\n  const label = form.querySelector('label');\n  if (!input.value) {\n    deleteItem(input.dataset.for);\n  } else {\n    label.textContent = input.value;\n    label.classList.remove('hidden');\n    input.classList.add('hidden');\n    input.blur();\n  }\n}\n\n// delete item\n\nfunction deleteItem(index) {\n  let id = '#item' + index;\n  let currentItem = document.querySelector(id);\n  list.removeChild(currentItem);\n}\n\n// form handler\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n  let value = formInput.value;\n  if (!value) {\n    return false; // handling no value in input\n  } else {\n    createItem(value);\n    this.reset();\n    formInput.focus();\n  }\n}\n\n// clear list\n\nfunction clearList() {\n  while (list.firstChild) {\n    list.removeChild(list.firstChild);\n  }\n  formInput.focus();\n}\n\n// event listeners\n\nform.addEventListener('submit', handleSubmit);\nclearListButton.addEventListener('click', clearList);\n\n// setup\n\nformInput.focus();\n"],"names":["$d3dfc027196df876626c47bef188877c$var$list","document","querySelector","$d3dfc027196df876626c47bef188877c$var$form","$d3dfc027196df876626c47bef188877c$var$formInput","$d3dfc027196df876626c47bef188877c$var$clearListButton","$d3dfc027196df876626c47bef188877c$var$counter","$d3dfc027196df876626c47bef188877c$var$updateStart","form","this","parentNode","input","classList","add","remove","focus","addEventListener","$d3dfc027196df876626c47bef188877c$var$updateEnd","e","preventDefault","label","value","textContent","blur","$d3dfc027196df876626c47bef188877c$var$deleteItem","dataset","for","index","id","currentItem","removeChild","listItem","createElement","setAttribute","listForm","appendChild","deleteButton","innerHTML","$d3dfc027196df876626c47bef188877c$var$createItem","reset","firstChild"],"version":3,"file":"index.d1501e7e.js.map"}