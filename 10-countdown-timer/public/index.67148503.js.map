{"mappings":"kBACMA,EAAOC,SAASC,cAAa,kBAO1BC,EAAUC,EAAKC,UACfC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,SAuFhDK,iBAjFAC,EAAcC,KAAKC,MAKnBC,EAAW,MAAWV,EAAU,GAAI,KAAOA,GAAU,MAAW,cAEtD,IAAOQ,KAAKE,EAAWH,GA0EpBI,GAEnBC,gCAhBSC,QACHN,EAAW,IAAOC,KAClBM,EAAUR,EAAaC,EAGvBO,GAAW,IACbA,EAAU,GAIZjB,EAAKkB,sBAnCcC,KAAGA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,QACxCC,EAAU,GAEVJ,IAGFI,GADsB,IAATJ,EAAU,UAAY,GAAMA,mBAc3CI,GAAU,GATRC,OAAOJ,GAAOK,OAAS,EAAID,OAAOJ,GAAOM,SAAS,EAAC,KAASF,OAAOJ,MAEnEI,OAAOH,GAASI,OAAS,EACrBD,OAAOH,GAASK,SAAS,EAAC,KAC1BF,OAAOH,MAEXG,OAAOF,GAASG,OAAS,EACrBD,OAAOF,GAASI,SAAS,EAAC,KAC1BF,OAAOF,KAENC,EAeYI,UA7DFC,OAEbC,EAAevB,KAAKC,MAAMqB,EAAc,KAKxCT,EAAOb,KAAKC,MAAMsB,EAAe,OAIjCT,EAAQd,KAAKC,OAAOsB,EAAsB,MAAPV,GAAgB,MACnDE,EAAUf,KAAKC,OAAOsB,EAAsB,MAAPV,EAAuB,KAARC,GAAgB,gBAMtED,QACAC,UACAC,UAPYf,KAAKC,MACjBsB,EAAsB,MAAPV,EAAuB,KAARC,EAAyB,GAAVC,IA+CfS,CAAUb,IAC1CF,sBAAsBC","sources":["src/index.js"],"sourcesContent":["// element selectors\nconst time = document.querySelector('#time');\n\n// getting random date\n\n// because this is a fake launch, there is no real launch date: must create a random date to use\n\n// returns a random number between min and max, inclusive\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// returns a random future date\nfunction randomDate() {\n  // get the current date in miliseconds (since 1 Jan 1970)\n  let currentDate = Date.now();\n  // calculating the new Date:\n  // there are 86400000 miliseconds in a day\n  // multiply this * random 10 to 100 (to get the number of miliseconds representing 10 to 100 days)\n  // then add to this a random number between -86400000 to 86400000, to randomly generate hours, minutes, and seconds\n  let futureMS = 86400000 * randomNum(10, 100) + randomNum(-86400000, 86400000);\n  // generating the new Date\n  let launchDate = new Date(futureMS + currentDate);\n\n  return launchDate;\n}\n\n// updating time\n\n// takes an argument representing a number in miliseconds\n// returns an object with the miliseconds divided into days, hours, minutes, and seconds\nfunction parseDate(miliseconds) {\n  // converting miliseconds to seconds to make math easier\n  let totalSeconds = Math.floor(miliseconds / 1000);\n\n  // there are 86400 seconds in a day,\n  // 3600 seconds in an hour,\n  // 60 seconds in a minute\n  let days = Math.floor(totalSeconds / 86400);\n\n  // to get total hours, must first subtract totalSeconds by (days * secondsInADay), in order to not count the seconds twice.\n  // This process is repeated for all calculations below\n  let hours = Math.floor((totalSeconds - days * 86400) / 3600);\n  let minutes = Math.floor((totalSeconds - days * 86400 - hours * 3600) / 60);\n  let seconds = Math.floor(\n    totalSeconds - days * 86400 - hours * 3600 - minutes * 60\n  );\n\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n  };\n}\n\n// parses an object containing days, hours, minutes, and seconds, into a string to display the data in human-readable format\nfunction writeDisplay({ days, hours, minutes, seconds }) {\n  let dateString = '';\n  // Accounting for time less than 1 day (if day === 0): should no longer display the day counter\n  if (days) {\n    // Fixing grammar to account for singular/plural\n    let dayStr = days === 1 ? '1 day, ' : `${days} days, `;\n    dateString += dayStr;\n  }\n\n  let hourStr =\n    String(hours).length < 2 ? String(hours).padStart(2, '0') : String(hours);\n  let minuteStr =\n    String(minutes).length < 2\n      ? String(minutes).padStart(2, '0')\n      : String(minutes);\n  let secondStr =\n    String(seconds).length < 2\n      ? String(seconds).padStart(2, '0')\n      : String(seconds);\n  dateString += `${hourStr}:${minuteStr}:${secondStr}`;\n  return dateString;\n}\n\n// the main animation loop\n// calculates the amount of time left, calls the above functions to parse and format the time, then updates the DOM with the new value\nfunction updateDisplay() {\n  let currentDate = new Date();\n  let elapsed = launchDate - currentDate; // getting difference (in miliseconds) between the current time and the goal time\n\n  // Preventing the countdown from going below 00:00:00\n  if (elapsed <= 0) {\n    elapsed = 0;\n  }\n\n  // updating the DOM with the new time\n  time.textContent = writeDisplay(parseDate(elapsed));\n  requestAnimationFrame(updateDisplay);\n}\n\nconst launchDate = randomDate();\n\nrequestAnimationFrame(updateDisplay);\n"],"names":["$ec3dfa9120317062$var$time","document","querySelector","$ec3dfa9120317062$var$randomNum","min","max","Math","floor","random","$ec3dfa9120317062$var$launchDate","currentDate","Date","now","futureMS","$ec3dfa9120317062$var$randomDate","requestAnimationFrame","$ec3dfa9120317062$var$updateDisplay","elapsed","textContent","days","hours","minutes","seconds","dateString","String","length","padStart","$ec3dfa9120317062$var$writeDisplay","miliseconds","totalSeconds","$ec3dfa9120317062$var$parseDate"],"version":3,"file":"index.67148503.js.map"}